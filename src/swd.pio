; Goals:
;
; * Send/receive data at max speed (F/2)
; * Allow for sending or receiving, or use 2 PIO programs
;
; SWD Protocol steps:
; 1. Send request byte
; 2. Read ACK, return if error (send 32 clocks if error, as per standard)
; 3. Send/Receive 32 bit word + parity
; 4. Perform extra trailing clocks as per the standard
;
;
; - side -x is the swd clock signal
; - side x- is the swdio dir signal (for the voltage translator direction)
; - uses auto pull with 32 bits limit
; - uses manual push with 32 bits limit
; - IRQ 0 is done flag
;
;
; Usage (sending):
;
; txfifo.write(request_bytes);
; txfifo.write(data);
; txfifo.write(parity);
; // clear done IRQ to start
; // wait for done IRQ
; let ack = rxfifo.read().unwrap(); // check if it's OK
;
; Usage (receiving):
;
; txfifo.write(request_bytes);
; // clear done IRQ to start
; // wait for done IRQ
; let ack = rxfifo.read().unwrap(); // check if it's OK
; let data = rxfifo.read().unwrap();
; let parity = rxfifo.read().unwrap(); // check if it's OK

.program swd_rxtx

.side_set 2 ; each instruction may set 2 bit (CLK and IO direction)

; start; wait for the clearing of the done flag
irq wait 0 rel                  side 0b00

; 1. send request (8)
set x, 7                        side 0b00

set pindirs 1                   side 0b10 ; output
req:
    out pins, 1                 side 0b10
    jmp x-- req                 side 0b11

out null, 32                    side 0b10 ; discard the rest

; 2. receive ack

; turnaround
set pindirs 0                   side 0b01 ; input

set x, 2                        side 0b00
ack_loop:
    in pins, 1                  side 0b01
    jmp x-- ack_loop            side 0b00

; push ack to fifo (word 0)
push                            side 0b00

; 3. read/write data

set x, 31                       side 0b00 ; prepare for 32bits of data
; if there is no data in the output register, it's a read operation
jmp !osre write_data            side 0b00

read_data:   ; we are in read from before, no need to set pindirs again
    read_loop:
        in pins, 1              side 0b01
        jmp x-- read_loop       side 0b00

    ; push data to fifo (word 1)
    push                        side 0b00

    ; read parity
    in pins, 1                  side 0b01
    ; push parity to fifo (word 2)
    push                        side 0b00

    jmp trail_clocks            side 0b00

write_data:
    ; turnaround (write)
    set pindirs 1               side 0b11 ; output mode and turnaround clock

    write_loop:
        out pins, 1             side 0b10
        jmp x-- write_loop      side 0b11

    out pins, 1                 side 0b10 ; clock out parity
    out null, 32                side 0b11 ; discard the rest

; 4. read/write data

; trailing clocks
trail_clocks:
set pindirs 0                   side 0b00 ; input
set y, 7                        side 0b00 ; y register is used for trailing clocks

trail_loop:
    nop                         side 0b00
    jmp y-- trail_loop          side 0b01
